Chunk: Chunk {
    instructions: [
        Jump {
            offset: 13
        },
        Jump {
            offset: 6
        },
        Constant {
            index: 5
        },
        GetUpval {
            index: 0
        },
        Bin(
            Add
        ),
        Return {
            return_value: true
        },
        Return {
            return_value: false
        },
        FuncDef {
            proto_index: 0
        },
        GetLocal {
            index: 1,
            frame: 1
        },
        Return {
            return_value: true
        },
        Pop,
        Pop,
        Return {
            return_value: false
        },
        FuncDef {
            proto_index: 1
        },
        Constant {
            index: 6
        },
        GetLocal {
            index: 0,
            frame: 0
        },
        Call {
            args_len: 1
        },
        GetLocal {
            index: 1,
            frame: 0
        },
        Call {
            args_len: 0
        },
        Pop,
        Return {
            return_value: false
        }
    ],
    constants: [
        Embedded(
            "print"
        ),
        Embedded(
            "println"
        ),
        Embedded(
            "readline"
        ),
        Embedded(
            "int"
        ),
        Embedded(
            "number"
        ),
        Int(
            5
        ),
        Int(
            4
        )
    ],
    prototypes: [
        FuncProto {
            code_start: 1,
            args_len: 0,
            upvalues: [
                UpValueDesc {
                    index: 0,
                    is_this: false
                }
            ]
        },
        FuncProto {
            code_start: 0,
            args_len: 1,
            upvalues: [
                UpValueDesc {
                    index: 0,
                    is_this: true
                }
            ]
        }
    ]
}

0: Jump { offset: 13 }
1: Jump { offset: 6 }
2: Constant { index: 5 }
3: GetUpval { index: 0 }
4: Bin(Add)
5: Return { return_value: true }
6: Return { return_value: false }
7: FuncDef { proto_index: 0 }
8: GetLocal { index: 1, frame: 1 }
9: Return { return_value: true }
10: Pop
11: Pop
12: Return { return_value: false }
13: FuncDef { proto_index: 1 }
14: Constant { index: 6 }
15: GetLocal { index: 0, frame: 0 }
16: Call { args_len: 1 }
17: GetLocal { index: 1, frame: 0 }
18: Call { args_len: 0 }
19: Pop
20: Return { return_value: false }
pc: 0, instr: Jump { offset: 13 }
**********Call stack**********
Frame { pc: 13, stack_top: 0, upvalues: [] }
**********STACK LEN: 0**********
**********STACK END**********
pc: 13, instr: FuncDef { proto_index: 1 }
**********Call stack**********
Frame { pc: 14, stack_top: 0, upvalues: [] }
**********STACK LEN: 1**********
fn(1 args args)
**********STACK END**********
pc: 14, instr: Constant { index: 6 }
**********Call stack**********
Frame { pc: 15, stack_top: 0, upvalues: [] }
**********STACK LEN: 2**********
fn(1 args args)
4
**********STACK END**********
pc: 15, instr: GetLocal { index: 0, frame: 0 }
**********Call stack**********
Frame { pc: 16, stack_top: 0, upvalues: [] }
**********STACK LEN: 3**********
fn(1 args args)
4
fn(1 args args)
**********STACK END**********
pc: 16, instr: Call { args_len: 1 }
**********Call stack**********
Frame { pc: 16, stack_top: 0, upvalues: [] }
Frame { pc: 1, stack_top: 1, upvalues: [This { index: 0 }] }
**********STACK LEN: 2**********
fn(1 args args)
4
**********STACK END**********
pc: 1, instr: Jump { offset: 6 }
**********Call stack**********
Frame { pc: 16, stack_top: 0, upvalues: [] }
Frame { pc: 7, stack_top: 1, upvalues: [This { index: 0 }] }
**********STACK LEN: 2**********
fn(1 args args)
4
**********STACK END**********
pc: 7, instr: FuncDef { proto_index: 0 }
**********Call stack**********
Frame { pc: 16, stack_top: 0, upvalues: [] }
Frame { pc: 8, stack_top: 1, upvalues: [This { index: 0 }] }
**********STACK LEN: 3**********
fn(1 args args)
4
fn(0 args args)
**********STACK END**********
pc: 8, instr: GetLocal { index: 1, frame: 1 }
**********Call stack**********
Frame { pc: 16, stack_top: 0, upvalues: [] }
Frame { pc: 9, stack_top: 1, upvalues: [This { index: 0 }] }
**********STACK LEN: 4**********
fn(1 args args)
4
fn(0 args args)
fn(0 args args)
**********STACK END**********
pc: 9, instr: Return { return_value: true }
**********Call stack**********
Frame { pc: 17, stack_top: 0, upvalues: [] }
**********STACK LEN: 2**********
fn(1 args args)
fn(0 args args)
**********STACK END**********
pc: 17, instr: GetLocal { index: 1, frame: 0 }
**********Call stack**********
Frame { pc: 18, stack_top: 0, upvalues: [] }
**********STACK LEN: 3**********
fn(1 args args)
fn(0 args args)
fn(0 args args)
**********STACK END**********
pc: 18, instr: Call { args_len: 0 }
**********Call stack**********
Frame { pc: 18, stack_top: 0, upvalues: [] }
Frame { pc: 2, stack_top: 2, upvalues: [Closed(Int(4))] }
**********STACK LEN: 2**********
fn(1 args args)
fn(0 args args)
**********STACK END**********
pc: 2, instr: Constant { index: 5 }
**********Call stack**********
Frame { pc: 18, stack_top: 0, upvalues: [] }
Frame { pc: 3, stack_top: 2, upvalues: [Closed(Int(4))] }
**********STACK LEN: 3**********
fn(1 args args)
fn(0 args args)
5
**********STACK END**********
pc: 3, instr: GetUpval { index: 0 }
**********Call stack**********
Frame { pc: 18, stack_top: 0, upvalues: [] }
Frame { pc: 4, stack_top: 2, upvalues: [Closed(Int(4))] }
**********STACK LEN: 4**********
fn(1 args args)
fn(0 args args)
5
4
**********STACK END**********
pc: 4, instr: Bin(Add)
**********Call stack**********
Frame { pc: 18, stack_top: 0, upvalues: [] }
Frame { pc: 5, stack_top: 2, upvalues: [Closed(Int(4))] }
**********STACK LEN: 3**********
fn(1 args args)
fn(0 args args)
9
**********STACK END**********
pc: 5, instr: Return { return_value: true }
**********Call stack**********
Frame { pc: 19, stack_top: 0, upvalues: [] }
**********STACK LEN: 3**********
fn(1 args args)
fn(0 args args)
9
**********STACK END**********
pc: 19, instr: Pop
**********Call stack**********
Frame { pc: 20, stack_top: 0, upvalues: [] }
**********STACK LEN: 2**********
fn(1 args args)
fn(0 args args)
**********STACK END**********
pc: 20, instr: Return { return_value: false }
